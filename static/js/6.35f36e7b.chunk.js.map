{"version":3,"sources":["components/Template/Analytics.tsx","components/Template/ScrollToTop.tsx","layout/PageLayout.tsx","components/PageSectionLayout.tsx","data/projects.ts","components/Project/Project.tsx","components/Project/ProjectDetailsLayout.tsx","components/Project/WorkProjects.tsx","pages/Projects.tsx"],"names":["process","NODE_ENV","REACT_APP_GA_TRACKING_ID","ReactGA","initialize","Analytics","pathname","useLocation","useEffect","set","page","pageview","ScrollToTop","window","scrollTo","PageLayout","title","description","children","titleTemplate","defer","name","content","PageSectionLayout","id","spacing","bold","capitalized","gutterBottom","variant","spaced","projects","date","desc","grade","technology","Project","subtitle","Box","StyledTypography","fontVariant","Typography","ProjectDetailsLayout","props","WorkProjects","map","project","index","sections","Projects","pageName","PageContentLayout","header","subHeader","Stack","section","display","pb","typography","color"],"mappings":"kJAIA,EAA+CA,2KAAvCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,yBAED,eAAbD,GAA6BC,GAC/BC,IAAQC,WAAWF,GAGrB,IAeeG,EAfG,WAChB,IAAQC,EAAaC,cAAbD,SAWR,OATAE,qBAAU,WACS,eAAbP,IACFE,IAAQM,IAAI,CACVC,KAAMJ,IAERH,IAAQQ,SAASL,MAElB,CAACA,IAEG,M,QCRMM,EAVK,WAClB,IAAQN,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACRK,OAAOC,SAAS,EAAG,KAClB,CAACR,IAEG,M,OCaMS,IAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,SAAvB,OACjB,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,CAAQC,cAAc,uBAAuBC,OAAO,EAApD,UACE,gCAAQJ,IACR,sBAAMK,KAAK,cAAcC,QAASL,OAEnCC,O,iCCpBL,iCAkCeK,IAvBW,SAAC,GAAD,IACxBP,EADwB,EACxBA,MACAE,EAFwB,EAExBA,SACAM,EAHwB,EAGxBA,GAHwB,OAKxB,mCACE,eAAC,IAAD,CAAOC,QAAS,EAAGD,GAAIA,EAAvB,UACoB,kBAAVR,GACN,cAAC,IAAD,CACEU,MAAM,EACNC,aAAa,EACbC,cAAc,EACdC,QAAQ,QACRC,QAAQ,EALV,SAMGd,IAGa,kBAAVA,GAAsB,mCAAGA,IAChCE,S,+GCPQa,EAbc,CAC3B,CACEf,MAAO,WACPgB,KAAM,aACNC,KACE,sIAGFC,MAAO,QACPC,WAAY,CAAC,sBAAuB,SAAU,KAAM,S,eCQzCC,EApBC,SAAC,GAA+C,IAA7CpB,EAA4C,EAA5CA,MAAiBgB,GAA2B,EAArCK,SAAqC,EAA3BL,MAAMC,EAAqB,EAArBA,KACxC,OACE,mCACE,eAACK,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAkBC,YAAY,aAAab,aAAa,EAAxD,SACGX,IAEH,cAACuB,EAAA,EAAD,CACEC,YAAY,WACZX,QAAQ,WACR,aAAW,WACXF,aAAa,EAJf,SAKGK,IAEH,cAACS,EAAA,EAAD,UAAaR,U,SCRNS,EAJc,SAC3BC,GAD2B,OAExB,cAACpB,EAAA,EAAD,eAAuBoB,KCMbC,EAVM,WACnB,OACE,cAAC,EAAD,CAAsB5B,MAAO,6BAA7B,SACGe,EAASc,KAAI,SAACC,EAAmBC,GAApB,OACZ,cAAC,EAAD,eAAsCD,GAAtC,kBAAyBC,UCH3BC,EAAwB,CAAC,cAAC,EAAD,GAAkB,kBA4BlCC,UAxBE,SAAC,GAAwB,eACxC,IAAMC,EAAW,WACjB,OACE,mCACE,cAACnC,EAAA,EAAD,CAAYC,MAAOkC,EAAUjC,YAAaiC,EAA1C,SACE,eAACC,EAAA,EAAD,CACEC,OAAQF,EACRG,UAAU,sDAFZ,UAGE,cAACC,EAAA,EAAD,CAAO7B,QAAS,EAAhB,SACGuB,EAASH,KAAI,SAACU,EAAoBR,GAArB,OACZ,cAACT,EAAA,EAAD,CAAuCkB,QAAQ,OAAOC,GAAI,EAA1D,SACGF,GADH,2BAA8BR,SAKlC,cAACN,EAAA,EAAD,CAAYiB,WAAW,QAAQC,MAAM,gBAArC","file":"static/js/6.35f36e7b.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\r\nimport { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst { NODE_ENV, REACT_APP_GA_TRACKING_ID } = process.env;\r\n\r\nif (NODE_ENV === 'production' && REACT_APP_GA_TRACKING_ID) {\r\n  ReactGA.initialize(REACT_APP_GA_TRACKING_ID);\r\n}\r\n\r\nconst Analytics = () => {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (NODE_ENV === 'production') {\r\n      ReactGA.set({\r\n        page: pathname,\r\n      });\r\n      ReactGA.pageview(pathname);\r\n    }\r\n  }, [pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Analytics;\r\n","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n// See https://reacttraining.com/react-router/web/guides/scroll-restoration/scroll-to-top\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React, { ReactNode } from 'react';\r\n\r\nimport Analytics from '../components/Template/Analytics';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport ScrollToTop from '../components/Template/ScrollToTop';\r\n\r\ninterface IPageProps {\r\n  title: string;\r\n  description: string;\r\n  children: ReactNode;\r\n}\r\n\r\nconst PageLayout = ({ title, description, children }: IPageProps) => (\r\n  <>\r\n    <Analytics />\r\n    <ScrollToTop />\r\n    <Helmet titleTemplate=\"%s | Nilesh Moradiya\" defer={false}>\r\n      <title>{title}</title>\r\n      <meta name=\"description\" content={description} />\r\n    </Helmet>\r\n    {children}\r\n  </>\r\n);\r\n\r\nexport default PageLayout;\r\n","import React, { ReactNode } from 'react';\r\n\r\nimport { Stack } from '@material-ui/core';\r\nimport StyledTypography from './StyledTypography';\r\n\r\nexport interface IPageSectionLayoutProps {\r\n  id?: string;\r\n  title: ReactNode;\r\n  children: ReactNode;\r\n}\r\n\r\nconst PageSectionLayout = ({\r\n  title,\r\n  children,\r\n  id,\r\n}: IPageSectionLayoutProps) => (\r\n  <>\r\n    <Stack spacing={2} id={id}>\r\n      {typeof title === 'string' && (\r\n        <StyledTypography\r\n          bold={true}\r\n          capitalized={true}\r\n          gutterBottom={true}\r\n          variant=\"body1\"\r\n          spaced={true}>\r\n          {title}\r\n        </StyledTypography>\r\n      )}\r\n      {typeof title !== 'string' && <>{title}</>}\r\n      {children}\r\n    </Stack>\r\n  </>\r\n);\r\n\r\nexport default PageSectionLayout;\r\n","export interface IProject {\n  title: string;\n  subtitle?: string;\n  date: string,\n  desc: string;\n  grade: 'Enterprise' | 'Other',\n  technology: string[]\n}\n\nconst projects: IProject[] = [\n  {\n    title: 'Badge Us',\n    date: '2014-11-20',\n    desc:\n      'Built for promoting to achieve more. '\n      + 'Badge Us connected to your achievements in '\n      + 'academics, sports and social part of your the life.',\n    grade: 'Other',\n    technology: ['ASP.NET Web API 2.0', 'MS SQL', 'EF', 'iOS']\n  }\n];\n\nexport default projects;\n","import { Box, Link, Typography } from '@material-ui/core';\r\n\r\nimport { IProject } from '../../data/projects';\r\nimport React from 'react';\r\nimport StyledTypography from '../StyledTypography';\r\n\r\nconst Project = ({ title, subtitle, date, desc }: IProject) => {\r\n  return (\r\n    <>\r\n      <Box>\r\n        <StyledTypography fontVariant=\"titleLight\" capitalized={true}>\r\n          {title}\r\n        </StyledTypography>\r\n        <StyledTypography\r\n          fontVariant=\"subtitle\"\r\n          variant=\"overline\"\r\n          aria-label=\"subtitle\"\r\n          capitalized={true}>\r\n          {date}\r\n        </StyledTypography>\r\n        <Typography>{desc}</Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n","import PageSectionLayout, {\r\n  IPageSectionLayoutProps,\r\n} from '../PageSectionLayout';\r\n\r\nimport React from 'react';\r\n\r\ninterface IProjectDetailsLayoutProps {}\r\n\r\nconst ProjectDetailsLayout = (\r\n  props: IProjectDetailsLayoutProps & IPageSectionLayoutProps,\r\n) => <PageSectionLayout {...props} />;\r\n\r\nexport default ProjectDetailsLayout;\r\n","import projects, { IProject } from '../../data/projects';\r\n\r\nimport Project from './Project';\r\nimport ProjectDetailsLayout from './ProjectDetailsLayout';\r\nimport React from 'react';\r\n\r\nconst WorkProjects = () => {\r\n  return (\r\n    <ProjectDetailsLayout title={<></>}>\r\n      {projects.map((project: IProject, index: number) => (\r\n        <Project key={`project-${index}`} {...project} />\r\n      ))}\r\n    </ProjectDetailsLayout>\r\n  );\r\n};\r\n\r\nexport default WorkProjects;\r\n","import { Box, Stack, Typography } from '@material-ui/core';\r\nimport React, { ReactNode } from 'react';\r\n\r\nimport PageContentLayout from '../layout/PageContentLayout';\r\nimport PageLayout from '../layout/PageLayout';\r\nimport WorkProjects from '../components/Project/WorkProjects';\r\n\r\nconst sections: ReactNode[] = [<WorkProjects key=\"work-projects\" />];\r\n\r\ninterface IProjectsProps {}\r\n\r\nconst Projects = ({}: IProjectsProps) => {\r\n  const pageName = 'Projects';\r\n  return (\r\n    <>\r\n      <PageLayout title={pageName} description={pageName}>\r\n        <PageContentLayout\r\n          header={pageName}\r\n          subHeader=\"A selection of projects that I'm not too ashamed of\">\r\n          <Stack spacing={2}>\r\n            {sections.map((section: ReactNode, index: number) => (\r\n              <Box key={`projects-section-${index}`} display=\"flex\" pb={2}>\r\n                {section}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n          <Typography typography=\"body2\" color=\"text.disabled\">\r\n            (More projects are being added)\r\n          </Typography>\r\n        </PageContentLayout>\r\n      </PageLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n"],"sourceRoot":""}